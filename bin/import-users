#!/usr/bin/perl

use strict;
use warnings;

use lib '/usr/local/folio/lib';

use Biblio::Folio;
use Biblio::Folio::Util qw(FORMAT_TEXT FORMAT_JSON);
use File::Basename qw(basename dirname);
use POSIX qw(strftime);
use Getopt::Long
    qw(:config posix_default gnu_compat require_order bundling no_ignore_case);

sub blather;
sub blatherf;
sub usage;
sub fatal;

my $root = '/usr/local/folio';
my $now = strftime('%Y%m%dT%H%M%S', localtime);
my %arg = (
    'dry_run' => 0,
    'format' => FORMAT_JSON,
    'batch_size' => 10,
);
my $action = 'load';
GetOptions(
    'r|root=s' => \$root,
    'v|verbose' => \$arg{'verbose'},
    'n|dry-run' => sub { $arg{'dry_run'} = 1; $action = 'load' },
    'o|output=s' => \$arg{'out'},
    #'e|errors=s' => \$arg{'err'},
    'q|stop-after=s' => \$action,
    'p|parse' => sub { $action = 'parse' },
    'v|validate' => sub { $action = 'validate' },
    't|prepare' => sub { $action = 'prepare' },
    'm|match' => sub { $action = 'match' },
    'l|load' => sub { $action = 'load' },
    'T|as-text' => sub { $arg{'format'} = FORMAT_TEXT },
    'k|batch-size=i' => \$arg{'batch_size'},
# Prepare only?
    'S|split-into=s' => \$arg{'split_into'},
    'O|only-batches=s' => \$arg{'only_batches'},
) or usage;
# TODO: usage 'option -S may only be used with -p, -v, -t, or -m'
#           if $arg{'split_into'} && $action !~ /^(parse|validate|prepare|match)$/;

my $folio = Biblio::Folio->new('root' => $root);

my (@site_names, @files);
while (@ARGV && $ARGV[0] =~ s/^[@]//) {
    push @site_names, shift @ARGV;
}
if (@ARGV) {
    # bin/process [OPTION...] @SITE [FILE...]
    usage if @site_names != 1;
    @files = map { file($_) } @ARGV;
}
else {
    # bin/process [OPTION...] [@SITE...]
    @site_names = $folio->site_names if !@site_names;
}

if ($arg{'dry_run'}) {
    $arg{'verbose'} = 1;
    print STDERR "Dry run -- no changes will be made\n";
}
elsif (-t STDERR) {
    $arg{'verbose'} = 1;
}

my @output;
my $exit_status = 0;
foreach my $site_name (@site_names) {
    blather "Site $site_name\n";
    my $site = $folio->site($site_name);
    my ($out, @files_for_this_site) = pickup($site, $action, @files);
    if (@files_for_this_site) {
        my @paths = map { $_->{'path'} } @files_for_this_site;
        blather "Found new files:\n";
        blather '  ', $_, "\n" for @paths;
        # --- Load them (or whatever)
        (my $acting = ucfirst $action) =~ s/e?$/ing/;
        blatherf "%s %s...\n", hms(), $acting;
        my $task = $site->task('user_batch', 
            %arg,
            'output_file' => $out->{'path'},  # [1] This will change by [2] below
        );
        $task->$action(
            'files' => \@paths,
            %arg,
        );
        # --- Move files to their final destination
        blatherf "%s %s\n", hms(), 'Finishing...';
        my $outcome = dispose($site, $action, $out, @files_for_this_site);
        $exit_status = 2 if $outcome eq 'failed';
        # --- Report results
        my $out_path = $out->{'path'};  # [2] This has changed since [1] above
        print STDOUT join("\t", $site_name, $outcome, $out_path), "\n";
        if ($out_path ne '-') {
            blather "Output has been written to:\n";
            blather '  ', $out_path, "\n";
        }
        blatherf "%s %s\n", hms(), uc $outcome;
    }
    else {
        blather "No new files\n";
    }
    blather "\n";
}

exit $exit_status;

# --- Functions

sub hms {
    return strftime('%H:%M:%S', localtime);
}

sub files {
    my ($dir, $rx) = @_;
    my @files = map { file($_) } glob("$dir/*");
    return @files if !defined $rx;
    return grep { $_->{'name'} =~ $rx } @files;
}

sub file {
    my ($f) = @_;
    my $dir = dirname($f);
    my $name = basename($f);
    my $ext = extension($f);
    my %file = (
        'path' => $f,
        'directory' => {
            'current' => $dir,
            'origin' => $dir,
        },
        'name' => $name,
        'extension' => $ext,
    );
    $file{'original'} = { %file };
    return \%file;
}

sub extension {
    return $1 if shift() =~ m{(\.[^./]*)$};
    return '';
}

sub moveto {
    my ($destdir, @files) = @_;
    my $nerr = 0;
    foreach my $f (@files) {
        my $name = $f->{'name'};
        my $curpath = $f->{'path'},
        my $newpath = "$destdir/$name";
        if ($newpath ne $curpath) {
            xmkpath($destdir);
            xrename($curpath, $newpath);
            $f->{'directory'}{'current'} = $destdir;
            $f->{'path'} = $newpath;
        }
    }
    return @files;
}

sub xrename {
    my ($from, $to) = @_;
    rename $from, $to
        or fatal "move $from $to: $!";
}

sub xmkpath {
    my ($dir) = @_;
    my @make;
    while (!-d $dir && $dir ne '/') {
        unshift @make, $dir;
        $dir = dirname($dir);
    }
    xmkdir(@make) if @make;
}

sub pickup {
    my ($site, $action, @files) = @_;
    my $name = $site->name;
    my $sort = "site/$name/bin/sort-files";
    if (-x $sort) {
        if (system($sort, $name, $action) != 0) {
            my $e = $? >> 8;
            fatal "$sort failed with exit status $e";
        }
    }
    my %dir = directories_for_action($action);
    my ($origin, $tmp, $ok, $failed, $results) = map { $site->path(dir("var/patrons/$_")) } @dir{qw(origin tmp ok failed results)};
    @files = files($origin) if !@files;
    return if !@files;
    if ($arg{'dry_run'}) {
        ($ok, $failed) = ($origin, $origin);
    }
    my $out = $arg{'out'};
    if (defined $out) {
        $out = sprintf($out, $name);
        $results = dirname($out);
    }
    elsif (!$arg{'dry_run'}) {
        $out = "$results/results.json";
    }
    xmkpath($results) if defined $results && !$arg{'dry_run'};
    if (defined $out) {
        # open STDOUT, '>', $out or fatal "open $out for writing: $!";
        $out = file($out);
        my $outdirs = $out->{'directory'};
        @$outdirs{qw(tmp ok failed)} = ($tmp, $ok, $failed);
    }
    else {
        $out = file('-');
    }
    #if ($action eq 'load' && !$arg{'dry_run'}) {
    #    @files = loadable($site, @files);
    #    return if !@files;
    #}
    foreach my $file (@files) {
        my $fdirs = $file->{'directory'};
        $fdirs->{'origin'} ||= $origin;  # It might come from somewhere else
        $fdirs->{'tmp'}     = $tmp;
        $fdirs->{'ok'}      = $ok;
        $fdirs->{'failed'}  = $failed;
        $fdirs->{'results'} = $results;
    }
    return $out, moveto($tmp, @files);
}

sub dir {
    my ($dir) = @_;
    $dir =~ s{%n}{$now};
    $dir =~ s{%p}{$$};
    return $dir;
}

sub dispose {
    my $site = shift;
    my $action = shift;
    my @files = grep { defined } @_;
    my (@failed, @ok);
    my $outcome = (grep { $_->{'failed'} } @files) ? 'failed' : 'ok';
    my %moved_from;
    foreach my $file (@files) {
        my $f = $file->{'path'};
        if ($f ne '-') {
            my $fdirs = $file->{'directory'};
            my $from = $fdirs->{'current'};
            my $to = $fdirs->{$outcome};
            if ($from ne $to) {
                moveto($to, $file);
                $moved_from{$from} = 1;
            }
        }
    }
    foreach my $dir (keys %moved_from) {
        # Don't check for errors -- this is just a clean-up step
        rmdir $dir;
    }
    return $outcome;
}

sub directories_for_action {
    my ($action) = @_;
    my %action2dir = (
        'parse'    => {
            'origin' => 'inbox',
            'destination' => 'inbox',
        },
        'validate' => {
            'origin' => 'inbox',
            'ok' => 'valid',
            'failed' => 'invalid',
            'results' => 'tmp',
        },
        'prepare'  => {
            'origin' => 'valid',
            'ok' => 'ready',
            'failed' => 'invalid',
            'results' => 'tmp',
        },
        'match'    => {
            'origin' => 'valid',
            'destination' => 'valid',
        },
        'load'     => {
            'origin' => 'ready',
            'tmp' => $arg{'dry_run'} ? 'tmp' : 'loading/%n.%p',
            'results' => $arg{'dry_run'} ? 'tmp' : 'loading/%n.%p',
            'ok' => 'loaded/%n.%p',
            'failed' => 'loaded/%n.%p',
        }
    );
    fatal "internal error: no directories defined for action $action"
        if !exists $action2dir{$action};
    my %dir = %{ $action2dir{$action} };
    $dir{'tmp'}     ||= 'tmp';
    $dir{'ok'}      ||= $dir{'destination'} or fatal "internal error: no destination for action $action";
    $dir{'failed'}  ||= $dir{'destination'} or fatal "internal error: no destination for action $action";
    $dir{'results'} ||= $dir{'destination'} or fatal "internal error: no destination for action $action";
    return %dir;
}

sub xmkdir {
    foreach my $dir (@_) {
        -d $dir or mkdir $dir or fatal "mkdir $dir: $!";
    }
}

sub blather {
    print STDERR @_ if $arg{'verbose'};
}

sub blatherf {
    printf STDERR @_ if $arg{'verbose'};
}

sub usage {
    print STDERR "usage: $0 [OPTION...] [\@SITE] [FILE...]\n";
    print STDERR "@_\n" if @_;
    exit 1;
}

sub fatal {
    print STDERR "$0: @_\n";
    exit 2;
}

### sub loadable {
###     my ($site, @files) = @_;
###     if ($site eq 'sim') {  # XXX Hard-coded exception -- never load a student file without an accompanying employee file
###         my ($nemp, $nstu) = (0, 0);
###         foreach my $f (@files) {
###             if ($f->{'name'} =~ /employee/i) {
###                 $nemp++;
###             }
###             else {
###                 $nstu++;
###             }
###         }
###         return if !$nemp || !$nstu;
###     }
###     return @files;
### }

### sub find_files_to_parse {
###     my ($site) = @_;
###     my $inbox = $site->directory('var/patrons/inbox');
###     my %dest2file;
###     foreach my $f (glob("$inbox/*")) {
###         next if ! -f $f;
###         (my $base = $f) =~ s{.*/}{};
###         $base =~ m{(.+)\.([^./]+)$};
###         my $name = $1 // $base;
###         my $ext = $2 // '';
###         my $dest = sprintf('%s/%s.tab', $inbox, $name);
###         next if exists $dest2file{$dest};
###         $dest2file{$f} = $f, next if $ext eq 'tab';
###         next if -e $dest && -M $f > -M $dest;
###         # See if we should convert it or not
###         my $convert = $site->file('bin/patron/convert');
###         $convert .= "-$ext" if length $ext;
###         if (-x $convert) {
###             open my $fh, '-|', $convert, $f or die "exec $convert: $!";
###             open my $fh_out, '>', $dest or die "open $dest for writing: $!";
###             while (<$fh>) {
###                 print $fh_out $_;
###             }
###             close $fh or die "$convert: exit status ", $?>>8;
###             $dest2file{$dest} = $f;
###         }
###         else {
###             system('cp', $f, $dest) == 0 or die "cp $f $dest: $!";
###             $dest2file{$dest} = $f;
###         }
###     }
###     return keys %dest2file;
### }
### 
### sub find_files_to_validate {
###     my ($site) = @_;
###     my $inbox = $site->directory('var/patrons/inbox');
###     my @files;
###     foreach my $f (glob("$inbox/*")) {
###         next if ! -f $f;
###         push @files, $f;
###     }
###     return @files;
### }
### 
### sub find_files_to_load {
###     my ($site) = @_;
###     my %dir = map { $site->directory("var/patrons/$_") } qw(ready loading loaded);
###     my @files = files($dir{'ready'});
###     moveto($dir{'loading'}, @files);
###     return @files;
### }

### sub open_out_and_err {
###     my ($fhout, $fherr);
###     if (defined $arg{'out_file'}) {
###         my $f = $arg{'out_file'};
###         open $fhout, '>', $f or fatal "open $f: $!";
###     }
###     else {
###         $fhout = \*STDOUT;
###     }
###     if (defined $arg{'err_file'}) {
###         my $f = $arg{'err_file'};
###         open $fherr, '>', $f or fatal "open $f: $!";
###     }
###     else {
###         $fherr = \*STDERR;
###     }
###     return @$args{qw(out err)} = ($fhout, $fherr);
### }

