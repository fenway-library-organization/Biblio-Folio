#!/usr/bin/perl

use strict;
use warnings;

use Cwd qw(getcwd);
use POSIX qw(strftime);
use String::ShellQuote;
use Text::ParseWords;
use File::Basename qw(basename dirname);
use Time::HiRes qw(time);
use Getopt::Long
    qw(:config posix_default gnu_compat require_order bundling no_ignore_case);

# Modes
use constant FULL => 'full';
use constant INCREMENTAL => 'incremental';
use constant FULL_OR_INCREMENTAL => '*';
use constant SPECIAL => 'special';

sub blather;
sub usage;
sub fatal;

(my $prog = $0) =~ s{.*/}{};

my %ok_mode = map { $_ => 1 } FULL, INCREMENTAL, FULL_OR_INCREMENTAL, SPECIAL;

my $root = $ENV{'FOLIO_ROOT'} ||= '/usr/local/folio';
my $mode = INCREMENTAL;
my ($query, $id_file, $dest, $skipfile, $dryrun, $verbose, $test, $after, $before);
GetOptions(
    # Export mode
    'f|full' => sub { $mode = FULL },
    'q|query=s' => sub { $query = $_[1]; $mode = SPECIAL },
    'i|id-file=s' => sub { $id_file = $_[1]; $mode = SPECIAL },
    # Options shared by export-marc
    't|test' => \$test,
    'v|verbose' => \$verbose,
    'n|dry-run' => \$dryrun,
    's|skip-file=s' => \$skipfile,
    'after=s' => \$after,
    'before=s' => \$before,
    # Other options
    'd|destination=s' => \$dest,
    ### 'o|outbox=s' => \@outboxes,
) or usage;
if (defined $query || defined $id_file) {
    usage if @ARGV != 1;
}
elsif (!@ARGV) {
    @ARGV = all_sites();
}

if ($dryrun) {
    $verbose = 1;
    blather "Dry run -- no changes will be made";
}

s/^\@// for @ARGV;  # Allow @SITE as well as SITE

my $t0 = time;
my $now = strftime('%Y%m%dT%H%M%SZ', gmtime $t0);
my $cwd = getcwd;

my %outboxes;
my %site_mode_var = map { $_ => undef } qw(site dir var exports mode outbox parent);
my $rxstr = join('|', keys %site_mode_var);
my $rxpando = qr/\%\(($rxstr)\)/;

# Read outboxes first, just in case they're misconfigured
foreach my $site (@ARGV) {
    $outboxes{$site} = site_outboxes($site);
}

# Now run the exports
foreach my $site (@ARGV) {
    my @bin = map { "$_/bin" } "$cwd/site/$site", $cwd, site_dir($site);
    local $ENV{'PATH'} = join(':', @bin, $ENV{'PATH'});
    my ($dir, @files) = export_site($site);
    distribute_files($site, @files) if @files;
    if (-d $dir) {
        my $arch = site_exports_dir($site) . '/archive';
        xmkdir($arch);
        (my $name = $dir) =~ s{.+/}{};
        rename $dir, "$arch/$name";
    }
}
my $tn = time;

# --- Support functions

sub export_command_base {
    my ($site) = @_;
    my @cmd = ('export-marc', '-T' => $t0);
    # Set options from the config file, if it exists
    my $config_file = "$cwd/site/$site/export.conf";
    my $have_config_file = -e $config_file;
    if ($have_config_file) {
        push @cmd, '-c' => $config_file;
    }
    # Set options from the command line
    if ($mode eq FULL) {
        push @cmd, '-f';
    }
    elsif (defined $query) {
        push @cmd, '-q', $query;
    }
    elsif (defined $id_file) {
        push @cmd, '-i', $id_file;
    }
    push @cmd, '-t' if $test;
    push @cmd, '-v' if $verbose;
    push @cmd, '-n' if $dryrun;
    push @cmd, '-s' => $skipfile if defined $skipfile;
    push @cmd, '--after' => $after if defined $after;
    push @cmd, '--before' => $before if defined $before;
    if (!$have_config_file) {
        # Set defaults
        push @cmd, '-b';  # Get source records from local DB
        ### push @cmd, '-y';  # Sync local source record DB
        push @cmd, '-L';  # Use fully spelled-out location names
    }
    return @cmd;
}

sub export_site {
    my ($site) = @_;
    my $outroot = site_exports_dir($site);
    my ($tmpdir,  $outdir ) = map { defined $dest ? "$dest/export-$now-$site" : "$outroot/$_/$now" } qw(tmp new);
    my ($tmpbase, $outbase) = map { "$_/$now" } $tmpdir, $outdir;
    my ($tmpmarc, $outmarc) = map { "$_.mrc.gz" } $tmpbase, $outbase;
    my ($tmperr,  $outerr ) = map { "$_.err" } $tmpbase, $outbase;
    blather "----------------------------------------------------------------------------";
    blather "Site: $site";
    xmkdir($outroot, "$outroot/tmp", "$outroot/new", $tmpdir, $outdir);
    my @cmd = (
        export_command_base($site),
        '-e' => $tmperr,
        $site
    );
    my $cmd = join(' ',
        (map { shell_quote($_) } @cmd),
        qw(| gzip >),
        ### qw(| postproc | gzip >),
        $tmpmarc
    );
    if ($dryrun) {
        blather <<"EOS" if !defined $dest;
Temporary files:
  tmpdir  = $tmpdir
  tmpmarc = $tmpmarc
  tmperr  = $tmperr
EOS
        blather <<"EOS";
Output files:
  outdir  = $outdir
  outmarc = $outmarc
  outerr  = $outerr
EOS
    }
    blather_path();
    xsystem($cmd);
    if ($tmpdir ne $outdir) {
        xrename($tmpdir, $outdir);
    }
    return ($tmpdir, $tmpmarc, $tmperr) if $dryrun;
    # Clean up empty files
    unlink $outerr  if !-s $outerr;   # No output to stderr
    if (-s $outmarc < 26) {
        # Impossibly small -- no records output
        unlink $outmarc;
        return ($outdir);
    }
    return ($outdir, glob("$outdir/*"));
}

sub distribute_files {
    my ($site, @files) = @_;
    my $sdir = site_dir($site);
    my $vdir = site_var($site);
    my $xdir = site_exports_dir($site);
    %site_mode_var = (
        'site' => $site,
        'dir' => $sdir,
        'var' => $vdir,
        'exports' => $xdir,
        'mode' => $mode,
    );
    foreach my $m ($mode, FULL_OR_INCREMENTAL) {
        foreach my $outbox (@{ $outboxes{$site}{$m} || [] }) {
            my ($odir, $ocmd) = @$outbox{qw(directory command)};
            if (defined $ocmd) {
                # Expand %(dir), %(mode), %(tmp), and %(dest) accordingly
                my $pdir = dirname($odir);
                my @bin = map { "$_/bin" } ($odir, $pdir, $xdir, $vdir);
                local $ENV{'PATH'} = join(':', @bin, $ENV{'PATH'});
                my %var = (
                    %site_mode_var,
                    'outbox' => $odir,
                    'parent' => $pdir,
                    # 'tmp' => "$odir/tmp",
                    # 'dest' => "$odir/dest",
                );
                s{$rxpando}{defined $var{$1} ? $var{$1} : fatal "undefined expando: $_"}eg for @$ocmd;
                blather "Distributing to outbox $odir: command";
                xsystem(@$ocmd, @files);
                    # or fatal join(' ', shell_quote(@$ocmd, $mode, @files)) . ": $!";
            }
            elsif (-x "$odir/bin/process" && -f _) {
                blather "Distributing to outbox $odir: bin/process";
                xsystem("$odir/bin/process", '-o' => $odir, '-m' => $mode, @files);
                    # or fatal "$odir/bin/process @files: $!";
            }
            else {
                blather "Distributing to outbox $odir: link";
                foreach my $f (@files) {
                    (my $name = $f) =~ s{.+/}{};
                    xlink($f, "$odir/$name");
                }
            }
        }
    }
}

sub xlink {
    my ($from, $to) = @_;
    blather "Command:\n  ln $from $to";
    return if $dryrun;
    link $from, $to or fatal $!;
}

sub xrename {
    my ($from, $to) = @_;
    blather "Command:\n  mv $from $to";
    return if $dryrun;
    rename $from, $to or fatal $!;
}

sub xsystem {
    my ($cmd, @args) = @_;
    my $exec = which($cmd);
    fatal "no such command: $cmd" if !defined $exec;
    $cmd = $exec;
    my $cmdstr = join(' ', $cmd, map { shell_quote($_) } @args);;
    blather "Command:\n  $cmdstr";
    if ($dryrun) {
        1;
    }
    else {
        my $err = @args ? system($cmd, @args) : system($cmd);
        if ($err != 0) {
            fatal $! if $err == -1;
            $err = $? >> 8;
            my $sig = $? & 255;
            my $msg = $sig ? "signal $sig received" : "exit status $err";
            blather "Export failed: $msg";
            exit($err || 2);
        }
    }
}

sub all_sites {
    my @site_export_dirs = sort glob(site_exports_dir('*'));
    my (%site, %skip);
    # If a site is referenced by a symlink, don't export it twice!
    foreach my $site_export_dir (@site_export_dirs) {
        $site_export_dir =~ m{^($root/site/([^/]+))/} or fatal "wtf?";
        my ($site_dir, $site) = ($1, $2);
        next if $skip{$site};
        $site{$site} = 1;
        if (-l $site_dir) {
            my $full_name_for_site = readlink($site_dir);
            if (defined $full_name_for_site) {
                delete $site{$full_name_for_site};
                $skip{$full_name_for_site} = 1;
            }
            else {
                blather "$prog: warning: broken site symlink: $site_dir -> $full_name_for_site";
            }
        }
    }
    return sort keys %site;
}

sub site_dir {
    my ($site) = @_;
    return "$root/site/$site";
}

sub site_var {
    my ($site) = @_;
    return site_dir($site) . '/var';
}

sub site_exports_dir {
    my ($site) = @_;
    return site_var($site) . '/bib/exports';
}

sub site_outboxes {
    my ($site) = @_;
    my $expdir = site_exports_dir($site);
    my $listfile = "$expdir/outboxes.list";
    my %boxes;
    open my $fh, '<', $listfile or fatal "open $listfile: $!";
    while (<$fh>) {
        next if /^\s*(?:#.*)?$/;  # Skip blank lines and comments
        chomp;
        my ($m, $dir, $cmd) = split /\s+/, $_, 3;
        fatal "unconfigured outbox for site $site: $_"
            if !defined $dir;
        $m =~ s/^incr$/INCREMENTAL()/e;
        fatal "unknown mode in outbox: $_"
            if !$ok_mode{$m};
        my $outbox = {
            'mode' => $m,
            'directory' => "$expdir/outboxes/$dir",
        };
        if (defined $cmd) {
            my @cmd = shellwords($cmd);
            $outbox->{'command-string'} = $cmd;
            $outbox->{'command'} = \@cmd;
            foreach (@cmd) {
                while (m{(\%\([^()]+\))}g) {
                    my $expando = $1;
                    $expando =~ /^$rxpando$/ or fatal "unrecognized expando in $listfile: $expando";
                }
            }
        }
        push @{ $boxes{$m} ||= [] }, $outbox;
    }
    return \%boxes;
}

sub xmkdir {
    foreach my $dir (@_) {
        next if -d $dir;
        blather "Command:\n  mkdir $dir";
        next if $dryrun;
        mkdir $dir or fatal "mkdir $dir: $!";
    }
}

sub which {
    my ($cmd) = @_;
    return $cmd if $cmd =~ m{/};
    foreach (split /:/, $ENV{'PATH'}) {
        my $f = "$_/$cmd";
        return $f if -x $f && -f _;
    }
    return undef;
}

sub blather_path {
    return if !$verbose;
    print STDERR "PATH:\n";
    print STDERR '  ', $_, "\n" for split /:/, $ENV{'PATH'};
}

sub blather {
    return if !$verbose;
    my ($msg) = @_;
    $msg =~ s{(?<=[^\x0d])\n\z}{};
    print STDERR $msg, "\n";
}

sub usage {
    print STDERR "usage: $prog [-tvn] [-s SKIPFILE] [-d DESTDIR] [-f | -q CQL | -i IDFILE]\n";
    exit 1;
}

sub fatal {
    print STDERR "$prog: @_\n";
    exit 2;
}
