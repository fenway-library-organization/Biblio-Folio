#!/usr/bin/perl

use strict;
use warnings;

# use lib '/usr/local/folio/lib';

use Biblio::Folio;
use Getopt::Long
    qw(:config posix_default gnu_compat require_order bundling no_ignore_case);

sub usage;
sub blather;

my $db;
my $tty;
my ($verbose, $dryrun, $comment, $end_status, $after, $before, $offset, $limit, $batch_size, $error_file, $end_status);

GetOptions(
    # General options
    'v|verbose'         => \$verbose,
    'n|dry-run'         => \$dryrun,
    'm|comment=s'       => \$comment,
    'z|end-status=s'    => \$end_status,
    'o|offset=s'        => \$offset,
    'l|limit=s'         => \$limit,
    's|batch-size=i'    => \$batch_size,
    'A|after=s'         => \$after,
    'B|before=s'        => \$before,
    'e|error-file=s'    => \$error_file,
    'p|piecemeal'       => \$piecemeal,
) or usage;

usage if @ARGV != 1;
my $site_name = shift;
$site_name =~ s/^[@]//;

my $root = '/usr/local/folio';
my $folio = Biblio::Folio->new('root' => $root);
my $site = $folio->site($site_name);

blather "Refreshing local instances DB\n" if $state{'num_total'} == 0;

my %arg;

sub exec_next_piece {
    1;
}

if ($piecemeal) {
    init_piecemeal();
}
else {
    init();
}

$db = $site->local_instances_database;
$db->dbh->do('PRAGMA cache_size = -2000');

if (!defined $after) {
    $after = $db->max_after;
    $after-- if $after;
}

my @errors;
progress();
$db->sync(%arg);
progress();

print { tty() } "\n";

print STDERR "error: ", $_, "\n" for @errors;

blather sprintf("Refresh finished in %d second(s)\n", time - $state{'t0'});

# --- Functions

sub progress {
    my ($n, $errors) = @_;
    $n ||= 0;
    $errors ||= [];
    if ($n == -1) {
        # End of sync
        if ($piecemeal) {
    }
    $state{'num_total'} = $n;
    if ($errors && @$errors) {
        $state{'num_errors'} = @errors;
        if (defined $error_file) {
            # Drain errors
            my $fh = error_fh();
            print $fh $_, "\n" for @$errors;
            @$errors = ();
        }
        else {
            # Accumulate errors
            push @errors, @$errors if $errors && @$errors;
        }
    }
    return if !$tty;
    my $td = time - $state{'t0'};
    my $min = int($td / 60);
    my $sec = $td % 60;
    my $rate = $td ? $n / $td : 0;
    printf $tty "\r%8d synced | %5d error | %02d:%02d elapsed | %.1f records/sec", $n, $state{'num_errors'}, $min, $sec, $rate;
    $total = $n;
}

sub tty {
    if (defined $tty) {
        return $tty;
    }
    elsif ($state{'tty'}) {
        open $tty, '+<', $state{'tty'}
            or fatal "open $state{'tty'} for reading and writing: $!";
    }
    elsif (-t \*STDERR) {
        $tty = \*STDERR;
    }
    else {
        open $tty, '+<', '/dev/null'
            or fatal "open /dev/null for reading and writing: $!";
    }
    return $tty;
}

sub blather {
    print { tty() } @_;
}

__END__
use Biblio::Folio::Util qw(_utc_datetime);
use constant DATETIME_FORMAT => '%Y-%m-%dT%H:%M:%SZ';
    sub {
        $after = _utc_datetime($_[1], DATETIME_FORMAT);
    },
    sub {
        $before = _utc_datetime($_[1], DATETIME_FORMAT);
    },

