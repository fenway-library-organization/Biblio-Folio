#!/usr/bin/perl

use strict;
use warnings;

use lib '/usr/local/folio/lib';

use Biblio::Folio;
use Biblio::Folio::Object::Instance;
use Biblio::Folio::Site::MARC;
use Biblio::Folio::Util qw(_utc_datetime);
use Biblio::LDP;

use Time::HiRes qw(time);
use JSON;
use Encode qw(decode encode);
use IO::Handle;
use Getopt::Long
    qw(:config posix_default gnu_compat require_order bundling no_ignore_case);

# Modes
use constant FULL        => 'full';
use constant INCREMENTAL => 'incremental';
use constant DELETES     => 'deletes';
use constant SPECIAL     => 'special';

# Other types (for recording in exports.db)
use constant TEST        => 'test';

# Phases
use constant NONE      => 'none';
use constant BEGINNING => 'beginning';
use constant DELETED_HOLDINGS  => 'deleted holdings';
use constant DELETED_INSTANCES => 'deleted instances';
use constant INSTANCES => 'instances';
use constant HOLDINGS  => 'holdings';
use constant ITEMS     => 'items';
use constant FINISHED  => 'finished';
use constant CANCELLED => 'cancelled';
use constant FAILED    => 'failed';

use constant DEBUGGING => scalar keys %DB::;

sub blather;
sub blatherf;
sub usage;
sub fatal;

my $prog = $0;

my $root = $ENV{'FOLIO_ROOT'} ||= '/usr/local/folio';
my %config = (
    'mode' => INCREMENTAL,
    'small_batch_size' => 25,
    'large_batch_size' => 1000,
);

my ($full, $query, $id_file, $deletes);
my ($skip_file, $postproc, $id_field);
my ($config_file, $spell_out_locations, $copy_links_to_bib, $sync_lidb, $out_file, $comment, $verbose, $dryrun, $test);
my (@range, $offset, $limit);
my $use_ldp = 1;
my $use_lidb = 1;
my $small_batch_size = 25;
my $large_batch_size = 1000;
my ($include_suppressed, $include_deleted) = (1, 1);
my ($include_suppressed_holdings, $include_bare_instances) = (0, 0);
my $err_file;
GetOptions(
    # Modes (default is incremental)
    'f|full' => \$full,
    'q|query=s' => \$query,
    'i|id-file=s' => \$id_file,
    'd|deletes' => \$deletes,
    # Options shared by export-marc-for-sites
    't|test' => \$test,
    'v|verbose' => \$verbose,
    'n|dry-run' => \$dryrun,
    's|skip-file=s' => \$skip_file,
    'r|range=s' => sub {
        # -r LOWERBOUND,UPPERLIMIT
        # When doing a full export, export only instances for which LOWERBOUND <= UUID < UPPERLIMIT
        # For example, to partition it into four parts:
        #   export-marc -f -r '0,4' ...
        #   export-marc -f -r '4,8' ...
        #   export-marc -f -r '8,c' ...
        #   export-marc -f -r 'c,$' ...
        # Infinity may be represented as "$", "N", "n", or ""
        my ($lb, $ul) = map { lc } split /,/, $_[1], 2;
        $ul = 'ffffffff-ffff-ffff-ffff-ffffffffffff'
            if !defined $ul || $ul =~ /^[\$N]?$/;
        my $mask = '########-####-####-####-############';
        foreach ($lb, $ul) {
            (my $b = $_) =~ tr/0-9a-f/#/;
            usage if index($mask, $b) != 0;
        }
        @range = ($lb, $ul);
    },
    # Everything else
    'c|config-file=s' => \$config_file,
    'p|post-process-command=s' => \$postproc,
    'l|use-ldp' => \$use_ldp,
    'b|use-local-instances-db' => \$use_lidb,
    'y|sync-local-instances-db' => sub { $sync_lidb = $use_lidb = 1 },
    'X|exclude-suppressed' => sub { $include_suppressed = 0 },
    'D|exclude-deleted' => sub { $include_deleted = 0 },
    'x|include-suppressed-holdings' => \$include_suppressed_holdings,
    'B|include-bare-instances' => \$include_bare_instances,
    'o|output-file=s' => \$out_file,
    'e|errors-file=s' => \$err_file,
    'k|batch-size=i' => \$small_batch_size,
    'M|maximum-instance-count=i' => \$large_batch_size,
    'offset=i' => \$offset,
    'limit=i' => \$limit,
    'L|spell-out-locations' => \$spell_out_locations,
    '8|copy-links-to-bib' => \$copy_links_to_bib,
    'm|comment=s' => \$comment,
    'I|id-field=s' => \$id_field,
    'h|hrids' => sub { $id_field = 'hrid' },
) or usage;
usage if @range && (defined $offset || defined $limit);
usage if defined $id_field && !defined $id_file;

if (defined $out_file) {
    undef $out_file if $out_file eq '-' || $out_file eq '/dev/stdout';
}
if (!defined $err_file) {
    usage "Option -v requires option -e FILE when standard error is not a terminal"
        if $verbose && !-t STDERR;
}
usage "Full exports (option -f) require LDP (option -l)"
    if $full && !$use_ldp;

usage if @ARGV != 1;
my $site_name = shift;
$site_name =~ s/^[@]//;

my $prev_phase = NONE;
my $cur_phase = BEGINNING;

my (%instance_id_to_holdings, %holdings_id_to_items);
my (%instances_seen, %holdings_seen, $cancelled, $failed);

$SIG{'TERM'} = $SIG{'INT'} = $SIG{'QUIT'} = sub { $cancelled = 1 };

my %skip;
if (defined $skip_file) {
    blather "Reading skip file...";
    open my $fh, '<', $skip_file or fatal "open $skip_file: $!";
    while (<$fh>) {
        chomp;
        $skip{$_} = 1;
    }
    blatherf "done (%d records)\n", scalar(keys %skip);
}

# TODO
### fatal "exporting without using the local instances record DB is not yet implemented"
###     if !$use_lidb;
### fatal "exporting without using LDP is not yet implemented"
###     if !$use_ldp;

my $folio = Biblio::Folio->new('root' => $root);
my $site = $folio->site($site_name);
my ($local_instances_db, $exports_db, $ldp);

my $json = JSON->new;

my $t0 = my $tstart = time;

if ($sync_lidb) {
    blather "Refreshing local instances DB\n";
    sync_local_instances_db();
    blatherf "Refresh finished in %d second(s)\n", time - $tstart;
    $tstart = time;
}

$site->dont_cache(qw(instance source_record holdings_record item));

my %counter = map { $_ => 0 } qw(batch seen instance error nonmarc suppressed deleted holdings skip);
my $err_fh;

if (defined $postproc) {
    $postproc .= " > $out_file" if defined $out_file;
    open STDOUT, "|$postproc"
        or fatal "exec $postproc: $!";
}
elsif (defined $out_file) {
    open STDOUT, '>', $out_file
        or fatal "open $out_file for writing: $!";
}

$DB::single = 1;  # Breakpoint if running in debugger
if ($full) {
    export_full();
}
elsif ($query) {
    export_by_query($query);
}
elsif ($id_file) {
    export_by_file($id_file);
}
elsif ($deletes) {
    $include_deleted = 1;  # Just in case
    export_deletes();
}
else {
    export_incremental();
}

blather "\n";
blatherf "Elapsed time: %s\n", sec2dur(time - $tstart);
blather "Cancelled\n" if $cancelled;
blather "Failed\n" if $failed;

STDOUT->flush;
if (!close STDOUT) {
    if (defined $postproc) {
        my $err = $!
            ? "error closing pipe ($!)"
            : "exit status $?";
        fatal "post-processing failed: $err: $postproc";
    }
    else {
        fatal defined($out_file)
            ? "close output file $out_file: $!"
            : "close standard output: $!";
    }
}
exit 2 if $cancelled;
exit 3 if $failed;

# --- Main functions

sub export_full {
    my $lidb = local_instances_db();
    my $sql = q{
        SELECT  DISTINCT id, hrid, source_type, source, suppressed, deleted
        FROM    instances
    };
    $limit ||= 9_000_000 if defined $offset;
    if (@range) {
        $sql .= "WHERE   id BETWEEN '$range[0]' AND '$range[1]'\n";
    }
    elsif (defined $limit) {
        $sql .= "ORDER BY id\n";
        $sql .= "LIMIT   $limit\n";
        $sql .= "OFFSET  $offset\n" if defined $offset;
        $sql =~ s/^\s+//msg;
    }
    my $sth = $lidb->sth($sql);
    $sth->execute;
    run(FULL, sub {
        _export_from_lidb_using_executed_sth(INSTANCES, $sth, 'Full export');
    });
}

sub _export_from_lidb_using_executed_sth {
    my ($phase, $sth, $msg) = @_;
    my $batch = batch();
    show_progress($phase, $msg);
    my $prev_iid = '(none)';
    while (!$cancelled) {
        my $ok;
        my ($iid, $hrid, $source, $marc, $suppressed, $deleted);
        eval {
            ($iid, $hrid, $source, $marc, $suppressed, $deleted) = $sth->fetchrow_array;
            $source = '' if !defined $source;
            $ok = 1;
        };
        if (defined $iid) {
            $counter{'seen'}++;
            if (!defined $marc) {
                # LIDB doesn't have the source record, for some reason
                $counter{'error'}++;
            }
            elsif ($skip{$iid}) {
                $counter{'skip'}++;
            }
            else {
                $counter{'instance'}++;
###             my $source_record = {
###                 'id' => undef,
###                 'rawRecord' => {
###                     'content' => $marc,
###                 },
###             };
                add_to_batch($batch,
                    'instance_id' => $iid,
                    'instance_hrid' => $hrid,
                    #'dataref' => \$data,
                    'source' => $source,
                    'marcref' => $source eq 'MARC' ? \$marc : undef,
                    #'source_record' => $source_record,
                    'suppressed' => $suppressed,
                    'deleted' => $deleted,
                );
            }
        }
        elsif (!$ok) {
            $DB::single = 1;
            my $err = $DBI::errstr;
            print STDERR "DBI error in LIDB fetch (after ID $prev_iid): $err\n" if defined $err;
        }
        my $size = $batch->{'size'};
        if ($size == $small_batch_size || !defined $iid) {
            process_batch($batch) if $size > 0;
            last if !defined $iid;
            $batch = batch();
        }
        $prev_iid = $iid;
    }
    continue {
        show_progress();
    }
}

sub old_export_full {
    blather "Performing query...";
    # Don't specify _WHERE source = 'MARC'_ -- we want to count non-MARC source records
    my $sql = q{SELECT id, source, data FROM inventory_instances ORDER BY id};
    $sql .= qq{ OFFSET $offset} if defined $offset;
    $sql .= qq{ LIMIT  $limit}  if defined $limit;
    my $sth = ldp()->query($sql);
    blatherf "done in %.1f seconds\n", time - $tstart;
    blather "Timer reset (ignore time required for query)\n";
    $tstart = time;
    run(FULL, sub {
        _export_from_ldp_using_executed_sth(INSTANCES, $sth, 'Full export');
    });
}

sub export_deletes {
    # my $last_export = last_export(DELETES);
    my $need_instance = _identify_deleted_holdings_records('Identify deleted holdings');
    my $isearcher = $site->searcher('instance')
        ->by('set' => [keys %$need_instance])
        ->limit($small_batch_size);
    run(DELETES, sub {
        _export_deleted_instances(DELETED_INSTANCES, 'Export deleted instances');
        _export_instances(INSTANCES, $isearcher, 'Export instances with deleted holdings');
    });
}

sub export_incremental {
    my $last_export = last_export();
    blather "Incremental export: changes since $last_export";
### if ($use_ldp) {
###     my $ldp = ldp();
###     my $sql = ldp_incremental_sql();
###     my $sth = $ldp->query($sql, $ldp->timestamp($last_export));
###     run(INCREMENTAL, sub {
###         _export_from_ldp_using_executed_sth(INSTANCES, $sth);
###     });
### }
### elsif ($use_lidb) {
    # Prepare for deletes
    # my $last_deletes = last_export(DELETES);
    # my $ldp = ldp();
    # my $isth = $ldp->query(ldp_deleted_instances_sql());         # XXX Don't include unless necessary: , $ldp->timestamp($last_deletes));
    my $need_instance = _identify_deleted_holdings_records('Identify deleted holdings', $last_export);
    my $dhisearcher = $site->searcher('instance')
        ->by('set' => [keys %$need_instance])
        ->limit($small_batch_size);
    # Prepare for additions and updates
    my $utc_last_export = _utc_datetime($last_export);
    my $cql = "metadata.updatedDate > $utc_last_export";
    my $isearcher = $site->searcher('instance')->query($cql)->limit($large_batch_size);
    my $hsearcher = $site->searcher('holdings_record')->query($cql)->limit($small_batch_size);
    #my $items_searcher = $site->searcher('item')->query($cql)->limit($small_batch_size);
    run(INCREMENTAL, sub {
        _export_deleted_instances(DELETED_INSTANCES, 'Export deleted instances');
        _export_instances(DELETED_HOLDINGS, $dhisearcher, 'Export instances with deleted holdings');
        _export_instances(INSTANCES, $isearcher, 'Export new and updated instances');
        _export_holdings(HOLDINGS, $hsearcher, 'Export new and updated holdings records');
        #_export_using_item_searcher(ITEMS, $items_searcher, 'Export new and updated items');
    });
### }
### else {
###     die "not implemented";
###     #my $harvester = $site->harvester('instances_with_holdings');
###     #$harvester->harvest('since' => $last_export);
### }
}

sub export_by_query {
    my ($query) = @_;
    if ($use_lidb) {
        my $searcher = $site->searcher('instance')->query($query)->limit($large_batch_size);
        run(SPECIAL, sub {
            _export_instances(INSTANCES, $searcher, "Export instances by query: $query");
        });
    }
    else {
        die "not implemented";
    }
}

sub export_by_file {
    my ($f) = @_;
    my $searcher = $site->searcher('instance')->by('file' => $f)->limit($small_batch_size);
    $searcher->id_field($id_field) if defined $id_field;
    run(SPECIAL, sub {
        _export_instances(INSTANCES, $searcher, "Export instances using file of IDs: $f");
    });
}

# --- Supporting functions

sub log_beginning {
    my ($began, $mode, $comment) = @_;
    $exports_db = exports_db();
    my $sth = $exports_db->sth(q{
        INSERT  INTO bib_exports
                (type, began, status, comment, num_records)
        VALUES  (?, ?, 'running', ?, 0);
    });
    $sth->execute($mode, $began, $comment);
}

sub log_result {
    my ($began, $mode, $comment, $status, $ended, $num_records) = @_;
    my $sth = $exports_db->sth(q{
        UPDATE  bib_exports
        SET     status = ?,
                ended = ?,
                num_records = ?
        WHERE   began = ?
    });
    $sth->execute($status, $ended, $num_records, $began);
}

sub run {
    my ($mode, $sub) = @_;
    $mode = TEST if $test;
    my $exports_db;
    my $began = $t0;
    log_beginning($began, $mode, $comment)
        if !$dryrun;
    my $status;
    $DB::single = 1;  # Breakpoint if running in debugger
    eval {
        $sub->();
        $status = FINISHED;
    };
    my $err;
    if (!defined $status) {
        ($err) = split /\n/, $@;
        if ($cancelled) {
            $status = CANCELLED;
        }
        else {
            $status = FAILED;
            $failed = 1;
        }
    }
    my $ended = time;
    my $num_records = $counter{'instance'} - $counter{'nonmarc'};
    #my $num_batches = --$counter{'batch'};
    $DB::single = 1;  # Breakpoint if running in debugger
    log_result($began, $mode, $comment, $status, $ended, $num_records)
        if !$dryrun;
    show_progress($status, 'Totals');
    if (defined $err) {
        print STDERR "Error: $err\n";
    }
}

sub _export_from_ldp_using_executed_sth {
    my ($phase, $sth, $msg) = @_;
    my $batch = batch();
    show_progress($phase, $msg);
    my $prev_iid = '(none)';
    while (!$cancelled) {
        my $ok;
        my ($iid, $source, $data);
        eval {
           ($iid, $source, $data) = $sth->fetchrow_array;
           $ok = 1;
        };
        if (defined $iid) {
            # next if $instances_seen{$iid};
            $counter{'seen'}++;
            if (!defined $data) {
                # LDP doesn't have the instance data, for some reason
                $counter{'error'}++;
            }
            elsif ($skip{$iid}) {
                $counter{'skip'}++;
            }
            else {
                $counter{'instance'}++;
                add_to_batch($batch, 'instance_id' => $iid, 'source' => $source, 'dataref' => \$data);
            }
        }
        elsif (!$ok) {
            $DB::single = 1;
            my $err = $DBI::errstr;
            print STDERR "DBI error in LDP fetch (after ID $prev_iid): $err\n" if defined $err;
            eval { ldp()->ping } or fatal "LDP connection lost?";
        }
        my $size = $batch->{'size'};
        if ($size == $small_batch_size || !defined $iid) {
            process_batch($batch) if $size > 0;
            last if !defined $iid;
            $batch = batch();
        }
        $prev_iid = $iid;
    }
    continue {
        show_progress();
    }
}

sub _export_deleted_instances {
    my ($phase, $msg) = @_;
    my $isth = ldp()->query(ldp_deleted_instances_sql());  # XXX Don't include unless necessary: , $ldp->timestamp($last_export));
    my $batch = batch();
    show_progress($phase, $msg);
    while (!$cancelled) {
        my ($iid) = $isth->fetchrow_array;
        if (defined $iid) {
            $counter{'seen'}++;
            $counter{'deleted'}++;
            add_to_batch($batch, 'instance_id' => $iid, 'deleted' => 1);
        }
        my $size = $batch->{'size'};
        if ($size == $small_batch_size || !defined $iid) {
            process_batch($batch) if $size > 0;
            last if !defined $iid;
            $batch = batch();
        }
    }
    continue {
        show_progress();
    }
}

sub _identify_deleted_holdings_records {
    my ($msg, $last_export) = @_;
    my $batch = batch();
    show_progress(DELETED_HOLDINGS, $msg);
    my $sth = ldp()->query(ldp_deleted_holdings_records_sql(), ldp()->timestamp($last_export));
    my %need_instance;
    my @hids;
    while (!$cancelled) {
        my ($hid) = $sth->fetchrow_array;
        if (defined $hid) {
            $counter{'holdings'}++;
            $holdings_seen{$hid} = 1;
            push @hids, $hid;
        }
        if (@hids == $small_batch_size || @hids > 0 && !defined $hid) {
            my @iids = hids2iids(@hids);
            $need_instance{$_} = 1 for @iids;
        }
        last if !defined $hid;
    }
    continue {
        show_progress();
    }
    return \%need_instance;
}

sub hids2iids {
    my @hids = @_;
    my $placeholders = join(', ', map { '?' } @hids);
    my $lidb = local_instances_db();
    my $sql = qq{
        SELECT  instance_id
        FROM    holdings
        WHERE   holdings_record_id IN ($placeholders)
    };
    my $sth = $lidb->sth($sql);
    $sth->execute(@hids);
    my $rows = $sth->fetchall_arrayref;
    return map { @$_ } @$rows;
}

sub _export_instances {
    my ($phase, $searcher, $msg) = @_;
    my $batch = batch();
    show_progress(INSTANCES, $msg);
    while (!$cancelled) {
        my $instance = $searcher->next;
        if ($instance) {
            my $iid = $instance->id;
            next if $instances_seen{$iid};
            my %record = ('instance' => $instance);
            $counter{'instance'}++;
            $counter{'seen'}++;
            add_to_batch($batch, 'instance_id' => $iid, 'source_record' => $instance->source_record, 'instance' => $instance);
        }
        my $size = $batch->{'size'};
        if ($size == $small_batch_size || !defined $instance) {
            process_batch($batch) if $size > 0;
            last if !defined $instance;
            $batch = batch();
        }
    }
    continue {
        show_progress();
    }
}

sub _export_holdings {
    my ($phase, $searcher, $msg) = @_;
    my $batch = batch();
    show_progress(HOLDINGS, $msg);
    my %need_instance;
    while (!$cancelled) {
        my $holdings_record = $searcher->next or last;
        my $hid = $holdings_record->id;
        my $iid = $holdings_record->{'instanceId'};
        next if $instances_seen{$iid};
        $holdings_seen{$hid} = 1;
        $need_instance{$iid} = 1;
    }
    continue {
        show_progress();
    }
    my $isearcher = $site->searcher('instance')
        ->by('set' => [keys %need_instance])
        ->limit($small_batch_size);
    _export_instances(INSTANCES, $isearcher, 'Export holdings');
}

### sub _export_using_item_searcher {
###     my ($phase, $searcher, $msg) = @_;
###     my $batch = batch();
###     show_progress(ITEMS);
###     my %need_holdings;
###     while (!$cancelled) {
###         my $item = $searcher->next or last;
###         my $hid = $item->{'holdingsRecordId'};
###         next if $holdings_seen{$hid};
###         $need_holdings{$hid} = 1;
###     }
###     continue {
###         show_progress();
###     }
###     my $hsearcher = $site->searcher('holdings_record')
###         ->by('set' => [keys %need_holdings])
###         ->limit($small_batch_size);
###     _export_holdings(HOLDINGS, $hsearcher, 'Export holdings with modified items');
### }

### sub old_export_by_file {
###     my ($f) = @_;
###     my $sql = q{
###         SELECT  id, source, data
###         FROM    inventory_instances
###         WHERE   id IN (%s)
###     };
###     open my $fh, '<', $f or fatal "open $f: $!";
###     my @ids;
###     my %n2sth;
###     while (!$cancelled) {
###         my ($id, $source, $data);
###         $id = <$fh>;
###         if (defined $id) {
###             $counter{'instance'}++;
###             $counter{'seen'}++;
###             push @ids, $id;
###             next if @ids < $small_batch_size;
###         }
###         my $n = @ids
###             or last;
###         my $batch = batch();
###         my $sth = $n2sth{$n} ||= ldp()->query(sprintf $sql, join(',', '?' x $n));
###         $sth->execute(@ids);
###         my $results = $sth->fetchall_hashref('id');
###         while (($id, $source, $data) = $sth->fetchrow_array) {
###             add_to_batch($batch, 'instance_id' => $id, 'source' => $source, 'dataref' => \$data);
###         }
###         process_batch($batch);
###     }
###     continue {
###         show_progress();
###     }
### }

sub local_instances_db {
    if (!defined $local_instances_db) {
        $local_instances_db = $site->local_instances_database;
        $local_instances_db->dbh->do('PRAGMA cache_size = -2000');
    }
    return $local_instances_db;
    # XXX Not yet: return $local_instances_db ||= $site->local_db('instances');
}

sub exports_db {
    return $exports_db ||= $site->local_db('exports');
}

sub ldp {
    return $ldp ||= Biblio::LDP->new(
        'root' => $root . '/site/' . $site_name,
        'name' => $site_name,
    );
}

sub instance {
    my ($record) = @_;
    my ($iid, $source) = @$record{qw(id source)};
    if ($source ne 'MARC') {
        $record->{'nonmarc'} = 1;
        $counter{'nonmarc'}++;
        return undef;
    }
    my $instance = $record->{'instance'};
    if (!defined $instance) {
        my $dataref = $record->{'dataref'};
        if (!$dataref) {
            return error($record, 'no data reference!?');
        }
        $instance = eval { $site->instance($json->decode($$dataref)) };
        if (!defined $instance) {
            my ($msg) = split /\n/, $@;
            return error($record, $msg);
        }
    }
    elsif ($instance->{'discoverySuppress'}) {
        $record->{'suppressed'} = 1;
        $counter{'suppressed'}++;
        undef $instance if !$include_suppressed;
    }
    elsif ($instance->{'deleted'}) {
        $record->{'deleted'} = 1;
        $counter{'deleted'}++;
        undef $instance if !$include_deleted;
    }
    return $record->{'instance'} = $instance;
}

sub batch {
    return {
        'number' => $counter{'batch'},
        'size' => 0,
        'records' => [],
        'record_number_base' => $counter{'instance'},
    };
}

sub next_batch {
    my ($batch) = @_;
    $batch->{'number'}++;
    $batch->{'size'} = 0;
    $batch->{'records'} = [];
    $batch->{'record_number_base'} = $counter{'instance'};
}

sub add_to_batch {
    my ($batch, %record) = @_;
    my $n = ++$batch->{'size'};
    my $source_record = $record{'source_record'};
    if ($source_record) {
        $record{'source'} ||= $source_record->{'recordType'};
        $record{'source_record_id'} ||= $source_record->{'id'};
        if (!defined $record{'marcref'}) {
            my $raw = $source_record->{'rawRecord'};
            if (defined $raw) {
                my $marc = $raw->{'content'};
                # my $marc = eval { encode('UTF-8', $raw->{'content'}) };
                $record{'marcref'} = \$marc;
            }
        };
    }
    push @{ $batch->{'records'} }, {
        %record,
        'number_in_batch' => $n,
        'number' => $batch->{'record_number_base'} + $n,
    };
}

sub show_progress {
    my ($phase, $msg) = @_;
    $phase ||= $prev_phase;
    $cur_phase = $phase;
    my $ending = ($phase eq FINISHED || $phase eq CANCELLED || $phase eq FAILED);
    my $seen = $counter{'seen'};
    if ($phase ne $prev_phase || $ending || $seen % 100 == 0) {
        # $b-- if !$ending && $b;  # We're still in the middle of the batch
        my $tdiff = time - $tstart;
        my $dur = sec2dur($tdiff);
        my $rate = $tdiff ? $counter{'instance'} / $tdiff : 0;
        if ($phase ne $prev_phase) {
            blather "\n" if $prev_phase ne NONE;
            blather $msg, "\n" if defined $msg;
        }
        blatherf "\r   %-9.9s : %4d batch : %7d instance : %7d skipped : %7d holdings : %4d error : %4d suppressed : %4d deleted : %4d non-MARC : %s elapsed : %5.1f/sec",
            lc $phase, @counter{qw(batch instance skip holdings error suppressed deleted nonmarc)}, $dur, $rate;
        blather "\n" if $ending;
    }
    $prev_phase = $phase;
}

sub sec2dur {
    my $S = shift;
    my ($H, $M) = (0, 0);
    if ($S > 3600) {
        $H = int($S / 3600);
        $S -= $H * 3600;
    }
    if ($S > 60) {
        $M = int($S / 60);
        $S -= $M * 60;
    }
    return sprintf '%02d:%02d:%02d', $H, $M, $S;
}

sub stub_instance {
    my ($id, %arg) = @_;
    my $instance = Biblio::Folio::Object::Instance->new('id' => $id);
    %$instance = ( %$instance, %arg ) if %arg;
    return $instance;
}

sub stub_marc {
    return Biblio::Folio::Site::MARC->stub(@_);
}

sub process_batch {
    my ($batch) = @_;
    my ($batch_number, $size, $records) = @$batch{qw(number size records)};
    my %need_holdings;
    my %id2instance;
    foreach my $record (@$records) {
        my ($iid, $hrid, $instance) = @$record{qw(instance_id hrid instance)};
        my $marcref;
        if (defined $instance) {
            $iid ||= $instance->{'id'};
            $hrid ||= $instance->{'hrid'};
        }
        else {
            $iid = $record->{'instance_id'};
            $hrid = $record->{'instance_hrid'};
            $instance = $record->{'instance'} ||= stub_instance($iid, 'hrid' => $hrid);
        }
        if ($record->{'deleted'}) {
            $instance->{'deleted'} = 1;
            $marcref = marcref($record);
            if (defined $hrid) {
                $instance->{'hrid'} = $hrid;
                if (!defined $marcref) {
                    my $marc = stub_marc('hrid' => $hrid, 'status' => 'd');
                    $marcref = $marc->marcref;
                }
                else {
                    substr($$marcref, 5, 1) = 'd';
                }
            }
            else {
                # All we have is the instance ID
                if (!defined $marcref) {
                    # No instance hrid, and no MARC record whose 001 field we can get it from
                    error($record, "can't build a MARC record to delete an instance unless we have its hrid");
                    next;
                }
                my $marc = Biblio::Folio::Site::MARC->new($marcref)->parse;
                if (!$marc->is_valid) {
                    error($record, "can't parse MARC record", $marc->errors);
                    next;
                }
                if (defined $hrid) {
                    $instance->{'hrid'} = $hrid;
                }
                else {
                    # XXX This code assumes that the 001 field should contain the
                    #     instance's hrid, not its id!!!
                    my $f001 = $marc->field('001');
                    if (!$f001) {
                        # XXX I don't think this is possible, but...
                        error($record, "can't build a MARC record to delete an instance unless its source record has an 001 field");
                        next;
                    }
                    $instance->{'hrid'} = $f001->value;
                }
            }
            # We do *not* add this to %id2instance, because we know we can't retrieve a deleted instance from FOLIO
        }
        else {
            next if $instances_seen{$iid}++;
            $instance = instance($record) or next;
            $instance->{'hrid'} ||= $hrid;
            $marcref = marcref($record) or next;
            $id2instance{$iid} = $instance;
        }
        $instance->{'_marcref'} = $marcref;
    }
    my @ids = keys %id2instance;
    if (@ids) {
        # Add holdings
        if ($full) {
            my $placeholders = join(', ', map { '?' } @ids);
            my $sql = qq{
                SELECT  instance_id, data
                FROM    inventory_holdings
                WHERE   instance_id IN ($placeholders)
            };
            my $sth = ldp()->query($sql, @ids);
            while (my ($iid, $data) = $sth->fetchrow_array) {
                my $holdings_record = eval { $site->holdings_record($json->decode($data)) };
                next if $holdings_record->{'discoverySuppress'}
                     && !$include_suppressed_holdings;
                my $instance = $id2instance{$iid};
                push @{ $instance->{'_holdings'} ||= [] }, $holdings_record;
                $counter{'holdings'}++;
            }
        }
        else {
            my $searcher = $site->searcher('holdings_record', 'instanceId' => \@ids)->limit(scalar @ids);  # , '@limit' => scalar(@ids));
            foreach my $holdings_record ($searcher->all) {
                next if $holdings_record->{'discoverySuppress'}
                     && !$include_suppressed_holdings;
                my $iid = $holdings_record->instance_id;
                my $instance = $id2instance{$iid};
                push @{ $instance->{'_holdings'} ||= [] }, $holdings_record;
                $counter{'holdings'}++;
            }
        }
    }
    my $n = 0;
    my $record;
    foreach $record (@$records) {
        $n++;
        my $instance = $record->{'instance'};
        if ($instance) {
            my $iid = $instance->id;
            my $holdings_records = $instance->{'_holdings'};
            my $marc = eval {
                $instance->export_marc(
                    'spell_out_locations' => 1,
                    'with_locations' => 1,
                    'copy_electronic_access' => $copy_links_to_bib,
                )
            };
            if (!defined $marc) {
                error($record, 'could not export MARC record');
                next;
            }
            if ($record->{'suppressed'} || $record->{'deleted'} || !$holdings_records && !$include_bare_instances) {
                my $leader = $marc->leader;
                substr($leader, 5, 1) = 'd';  # Deleted
                $marc->leader($leader);
                $marc->is_dirty(1);
            }
            my $marc21 = eval { $marc->as_marc21 };
            if (!defined $marc21) {
                error($record, 'could not build MARC record');
                next;
            }
            print($marc21) or fatal "print record $n: $!";
        }
        else {
            error($record, 'unknown reason for undefined instance');
        }
    }
    continue {
        report_error($record) if error($record);
    }
    $counter{'batch'}++;
}

sub marcref {
    my ($record) = @_;
    return $record->{'marcref'}
        if defined $record->{'marcref'};
    my $iid = $record->{'instance_id'};
    my $marcref = eval { local_instances_db()->marcref($iid) }
        or return error($record, 'no MARC source record for instance in local DB');
    return $marcref;
}

sub error {
    my $record = shift;
    return $record->{'error'} if !@_;
    $record->{'error'} ||= [$cur_phase, $counter{'instance'}, $counter{'batch'}, $record->{'instance_id'}, @_];
    $counter{'error'}++;
    return undef;
}

sub sync_local_instances_db {
    my $num_synced = 0;
    printf STDERR "\r%8d records synced", $num_synced;
    my @errors;
    local_instances_db()->sync('progress' => sub {
        my $errors;
        ($num_synced, $errors) = @_;
        printf STDERR "\r%8d records synced, %d error(s)", $num_synced, scalar(@$errors)
            if $num_synced % 100 == 0;
        push @errors, @$errors if @$errors;
    });
    printf STDERR "\r%8d records synced\n", $num_synced;
    print STDERR "error: ", $_, "\n" for @errors;
}

sub report_error {
    my ($record) = @_;
    my $err = $record->{'error'};
    if (!defined $err_fh) {
        if (!defined $err_file || $err_file eq '-' || $err_file eq '/dev/stderr') {
            $err_fh = \*STDERR;
        }
        else {
            open $err_fh, '>', $err_file or fatal "open $err_file for writing: $!";
        }
        $err_fh->autoflush(1);
        print $err_fh join("\t", qw(phase record_number batch_number instance_id error)), "\n";
    }
    my @err = @$err;
    my @pfx = splice(@err, 0, 4);
    @err = ('unknown error') if !@err;
    foreach my $msg (@err) {
        print $err_fh join("\t", @pfx, $msg), "\n";
    }
}

sub last_export {
    my @modes = @_;
    @modes = (FULL, INCREMENTAL) if !@modes;
    my $placeholders = join(', ', map { '?' } @modes);
    my $sql = qq{
        SELECT  max(began)
        FROM    bib_exports
        WHERE   status = 'finished'
        AND     type IN ($placeholders)
    };
    my $sth = exports_db()->sth($sql);
    $sth->execute(@modes);
    my ($began) = $sth->fetchrow_array;
    return $began || 0;
}

sub ldp_deleted_instances_sql {
    q{
        SELECT  hi.id
        FROM    history.inventory_instances hi
        LEFT OUTER JOIN
                public.inventory_instances pi
        ON      hi.id = pi.id
        WHERE   pi.id IS NULL
        /* XXX Don't include this unless it's truly needed
        AND     hi.updated >= ?
        */
    };
}

sub ldp_deleted_holdings_records_sql {
    q{
        SELECT  hh.id
        FROM    history.inventory_holdings hh
        LEFT OUTER JOIN
                public.inventory_holdings ph
        ON      hh.id = ph.id
        WHERE   ph.id IS NULL
        AND     hh.updated >= ?
    };
}

sub junk {
    q{
        SELECT  id, source, data
        FROM    inventory_instances
        WHERE   id IN (
                SELECT  id            AS bid
                FROM    history.inventory_instances
                WHERE   updated >= $1
            UNION
                SELECT  h.instance_id AS bid
                FROM    inventory_holdings h
                            INNER JOIN history.inventory_holdings hh ON h.id = hh.id
                WHERE   hh.updated >= $1
        /*
            UNION
                SELECT  h.instance_id AS bid
                FROM    inventory_items i
                            INNER JOIN history.inventory_items hi ON i.id = hi.id
                            INNER JOIN inventory_holdings h ON i.holdings_record_id = h.id
                WHERE   hi.updated >= $1
        */
        )
    };
}

sub ldp_incremental_sql {
    q{
        SELECT  id, source, data
        FROM    inventory_instances
        WHERE   id IN (
                SELECT  id            AS bid
                FROM    history.inventory_instances
                WHERE   updated >= $1
            UNION
                SELECT  h.instance_id AS bid
                FROM    inventory_holdings h
                            INNER JOIN history.inventory_holdings hh ON h.id = hh.id
                WHERE   hh.updated >= $1
        /*
            UNION
                SELECT  h.instance_id AS bid
                FROM    inventory_items i
                            INNER JOIN history.inventory_items hi ON i.id = hi.id
                            INNER JOIN inventory_holdings h ON i.holdings_record_id = h.id
                WHERE   hi.updated >= $1
        */
        )
    };
}

sub blatherf {
    return if !$verbose;
    my $fmt = shift;
    printf STDERR $fmt, @_;
}

sub blather {
    print STDERR @_ if $verbose;
}

sub usage {
    print STDERR "$prog: @_\n" if @_;
    print STDERR <<"EOS";
usage: $prog [OPTION...] [SITE...]
export type (default is an incremental export):
  -f              perform a full export
  -q QUERY        export by query (single site only)
  -i FILE         export by file of instance IDs (single site only)
options:
  -p COMMAND      run output through post-processing command [1]
  -s SKIPFILE     exclude instances by ID (i.e., UUID)
  -l              use LDP to decide what to export
  -b              fetch instances from local DB
  -y              sync local instances DB before exporting
  -X              exclude suppressed instances and holdings records [2]
  -D              exclude deleted instances and holdings records [3]
  -o              output file
  -e              errors file [4]
  -t FILE         export changes since last-modified time of FILE (mtime)
  -r DATETIME     export changes since DATETIME
  -k NUM          small batch size (when running CQL queries with lists of IDs)
  -M NUM          large batch size (when running other queries)
  -L              spell out location codes in exported 852 fields
  -m              comment to record in the local exports DB
  -v              be verbose
  -n              perform a dry run -- no changes will be made to the file
                  system or any local DBs
notes:
  [1] COMMAND may include arguments and/or special shell syntax (redirects,
      pipes, etc.).
  [2] Unless this option is given, suppressed instances will be included, and
      will be indicated by the code "d" in the record status in the leader
      (i.e., byte 5); suppressed holdings records will have an additional
      subfield \$z containing the code "suppressed" in their 852 field.
  [3] Unless this option is given, any deleted objects that are encountered
      (doubtful) will be included, and will be indicated as for suppressed
      instances and holdings records, except that holdings records will have
      "deleted" in 852 \$z instead of "suppressed".
  [4] If this option is not given, errors will be silently discarded.
EOS
    exit 1;
}

sub fatal {
    print STDERR "$prog: @_\n";
    exit 2;
}

